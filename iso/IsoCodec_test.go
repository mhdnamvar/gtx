package main

import (
	"testing"
)

func Test_Ascii_Encode_Fixed_None(t *testing.T) {
	value := "0320"
	expected := []byte{0x30, 0x33, 0x32, 0x30}
	codec := IsoTextCodec(FIXED(), ASCII, "", "", 4, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_Fixed_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte("   ABCD")
	codec := IsoTextCodec(FIXED(), ASCII, "", "", 7, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_Fixed_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte("ABCD   ")
	codec := IsoTextCodec(FIXED(), ASCII, "", "", 7, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLVAR_None(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x30, 0x34, 0x41, 0x42, 0x43, 0x44}
	codec := IsoTextCodec(LLVAR(ASCII), ASCII, "", "", 4, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x30, 0x37, 0x20, 0x20, 0x20, 0x41, 0x42, 0x43, 0x44}
	codec := IsoTextCodec(LLVAR(ASCII), ASCII, "", "", 7, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLVAR_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x30, 0x37, 0x41, 0x42, 0x43, 0x44, 0x20, 0x20, 0x20}
	codec := IsoTextCodec(LLVAR(ASCII), ASCII, "", "", 7, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLLVAR_None(t *testing.T) {
	value := "ABCD                                                                                                    "
	expected := []byte{
		0x31, 0x30, 0x34,
		0x41, 0x42, 0x43, 0x44,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	codec := IsoTextCodec(LLLVAR(ASCII), ASCII, "", "", 104, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0x31, 0x30, 0x34,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x41, 0x42, 0x43, 0x44,
	}
	codec := IsoTextCodec(LLLVAR(ASCII), ASCII, "", "", 104, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0x31, 0x30, 0x34,
		0x41, 0x42, 0x43, 0x44,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	codec := IsoTextCodec(LLLVAR(ASCII), ASCII, "", "", 104, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_Fixed_None_Invalid_Len(t *testing.T) {
	value := "032"
	codec := IsoTextCodec(FIXED(), ASCII, "", "", 4, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_None(t *testing.T) {
	value := "0123456789012345678901234567890123456789"
	expected := []byte{
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumericCodec(FIXED(), ASCII, "", "", 40, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	codec := IsoNumericCodec(FIXED(), ASCII, "", "", 10, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericCodec(FIXED(), ASCII, "", "", 10, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_LLVAR_None(t *testing.T) {
	value := "1234567890"
	expected := []byte{0x31, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30}
	codec := IsoNumericCodec(LLVAR(ASCII), ASCII, "", "", 10, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0x31, 0x30, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	codec := IsoNumericCodec(LLVAR(ASCII), ASCII, "", "", 10, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLVAR_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericCodec(LLVAR(ASCII), ASCII, "", "", 10, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_LLLVAR_None(t *testing.T) {
	value := "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
	expected := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumericCodec(LLLVAR(ASCII), ASCII, "", "", 120, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "0123456789"
	expected := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumericCodec(LLLVAR(ASCII), ASCII, "", "", 120, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "0123456789"
	codec := IsoNumericCodec(LLLVAR(ASCII), ASCII, "", "", 120, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_None_Invalid_Len(t *testing.T) {
	value := "032"
	codec := IsoNumericCodec(FIXED(), ASCII, "", "", 4, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

func Test_Ebcdic_Encode_Fixed_None(t *testing.T) {
	value := "0320"
	expected := []byte{0xF0, 0xF3, 0xF2, 0xF0}
	codec := IsoTextCodec(FIXED(), EBCDIC, "", "", 4, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_Fixed_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x40, 0xC1, 0xC2, 0xC3, 0xC4}
	codec := IsoTextCodec(FIXED(), EBCDIC, "", "", 5, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_Fixed_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xC1, 0xC2, 0xC3, 0xC4, 0x40}
	codec := IsoTextCodec(FIXED(), EBCDIC, "", "", 5, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLVAR_None(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xF0, 0xF4, 0xC1, 0xC2, 0xC3, 0xC4}
	codec := IsoTextCodec(LLVAR(EBCDIC), EBCDIC, "", "", 4, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xF0, 0xF7, 0x40, 0x40, 0x40, 0xC1, 0xC2, 0xC3, 0xC4}
	codec := IsoTextCodec(LLVAR(EBCDIC), EBCDIC, "", "", 7, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLVAR_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xF0, 0xF7, 0xC1, 0xC2, 0xC3, 0xC4, 0x40, 0x40, 0x40}
	codec := IsoTextCodec(LLVAR(EBCDIC), EBCDIC, "", "", 7, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLLVAR_None(t *testing.T) {
	value := "ABCD                                                                                                    "
	expected := []byte{
		0xF1, 0xF0, 0xF4,
		0xC1, 0xC2, 0xC3, 0xC4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	}
	codec := IsoTextCodec(LLLVAR(EBCDIC), EBCDIC, "", "", 104, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0xF1, 0xF0, 0xF4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0xC1, 0xC2, 0xC3, 0xC4,
	}
	codec := IsoTextCodec(LLLVAR(EBCDIC), EBCDIC, "", "", 104, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0xF1, 0xF0, 0xF4,
		0xC1, 0xC2, 0xC3, 0xC4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	}
	codec := IsoTextCodec(LLLVAR(EBCDIC), EBCDIC, "", "", 104, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_Fixed_None_Invalid_Len(t *testing.T) {
	value := "032"
	codec := IsoTextCodec(FIXED(), EBCDIC, "", "", 4, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ebcdic_Encode_Fixed_None(t *testing.T) {
	value := "0123456789012345678901234567890123456789"
	expected := []byte{
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	codec := IsoNumericCodec(FIXED(), EBCDIC, "", "", 40, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_Fixed_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9}
	codec := IsoNumericCodec(FIXED(), EBCDIC, "", "", 10, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_Fixed_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericCodec(FIXED(), EBCDIC, "", "", 10, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ebcdic_Encode_LLVAR_None(t *testing.T) {
	value := "1234567890"
	expected := []byte{0xF1, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xF0}
	codec := IsoNumericCodec(LLVAR(EBCDIC), EBCDIC, "", "", 10, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0xF1, 0xF0, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9}
	codec := IsoNumericCodec(LLVAR(EBCDIC), EBCDIC, "", "", 10, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_LLVAR_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericCodec(LLVAR(EBCDIC), EBCDIC, "", "", 10, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ebcdic_Encode_LLLVAR_None(t *testing.T) {
	value := "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
	expected := []byte{
		0xF1, 0xF2, 0xF0,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	codec := IsoNumericCodec(LLLVAR(EBCDIC), EBCDIC, "", "", 120, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "0123456789"
	expected := []byte{
		0xF1, 0xF2, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	codec := IsoNumericCodec(LLLVAR(EBCDIC), EBCDIC, "", "", 120, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "0123456789"
	codec := IsoNumericCodec(LLLVAR(EBCDIC), EBCDIC, "", "", 120, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_InvalidLen_Ebcdic_Encode_Fixed_None(t *testing.T) {
	value := "032"
	codec := IsoNumericCodec(FIXED(), EBCDIC, "", "", 4, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

func Test_Binary_Encode_Fixed_None(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98}
	codec := IsoTextCodec(FIXED(), BINARY, "", "", 7, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_Fixed_LeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x20, 0x12, 0x34}
	codec := IsoTextCodec(FIXED(), BINARY, "", "", 3, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_Fixed_RightPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x20}
	codec := IsoTextCodec(FIXED(), BINARY, "", "", 8, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLVAR_None(t *testing.T) {
	value := "1234"
	expected := []byte{0x02, 0x12, 0x34}
	codec := IsoTextCodec(LLVAR(BINARY), BINARY, "", "", 2, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x07, 0x20, 0x20, 0x20, 0x20, 0x20, 0x12, 0x34}
	codec := IsoTextCodec(LLVAR(BINARY), BINARY, "", "", 7, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLVAR_RightPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x03, 0x12, 0x34, 0x20}
	codec := IsoTextCodec(LLVAR(BINARY), BINARY, "", "", 3, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLLVAR_None(t *testing.T) {
	value := "2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F1"
	expected := []byte{
		0x01, 0x04,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1,
	}
	codec := IsoTextCodec(LLLVAR(BINARY), BINARY, "", "", 104, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{
		0x01, 0x04,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98,
	}
	codec := IsoTextCodec(LLLVAR(BINARY), BINARY, "", "", 104, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{
		0x01, 0x04,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	codec := IsoTextCodec(LLLVAR(BINARY), BINARY, "", "", 104, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_Fixed_None(t *testing.T) {
	value := "0320"
	expected := []byte{0x03, 0x20}
	codec := IsoNumericCodec(FIXED(), BINARY, "", "", 2, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_Fixed_LeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x00, 0x12, 0x34}
	codec := IsoNumericCodec(FIXED(), BINARY, "", "", 3, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_Fixed_RightPad(t *testing.T) {
	value := "1234"
	codec := IsoNumericCodec(FIXED(), BINARY, "", "", 3, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Binary_Encode_LLVAR_None(t *testing.T) {
	value := "1234"
	expected := []byte{0x02, 0x12, 0x34}
	codec := IsoNumericCodec(LLVAR(BINARY), BINARY, "", "", 5, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34}
	codec := IsoNumericCodec(LLVAR(BINARY), BINARY, "", "", 7, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_LLVAR_RightPad(t *testing.T) {
	value := "1234"
	codec := IsoNumericCodec(LLVAR(BINARY), BINARY, "", "", 7, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Binary_Encode_LLLVAR_None(t *testing.T) {
	value := "0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789"
	expected := []byte{
		0x01, 0x20,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
	}
	codec := IsoNumericCodec(LLLVAR(BINARY), BINARY, "", "", 120, NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "01234567890123456789"
	expected := []byte{
		0x01, 0x20,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
	}
	codec := IsoNumericCodec(LLLVAR(BINARY), BINARY, "", "", 120, LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "01234567890123456789"
	codec := IsoNumericCodec(LLLVAR(BINARY), BINARY, "", "", 120, RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}
