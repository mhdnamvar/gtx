package main

import (
	"testing"
)

/*
	ASCII Encoding
*/
func Test_Ascii_Encode_Fixed_None(t *testing.T) {
	value := "0320"
	expected := []byte{0x30, 0x33, 0x32, 0x30}
	codec := &IsoText{ASCII, "MTI", "MESSAGE TYPE INDICATOR",
		&IsoLength{ASCII, FIXED, 4}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_Fixed_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte("   ABCD") // ]byte{0x20, 0x20, 0x20, 0x41, 0x42, 0x43, 0x44}
	codec := &IsoText{ASCII, "", "Should be '   ABCD'",
		&IsoLength{ASCII, FIXED, 7}, LEFT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_Fixed_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte("ABCD   ") // ]byte{0x41, 0x42, 0x43, 0x44, 0x20, 0x20, 0x20}
	codec := &IsoText{ASCII, "", "Should be 'ABCD   '",
		&IsoLength{ASCII, FIXED, 7}, RIGHT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLVAR_None(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x30, 0x34, 0x41, 0x42, 0x43, 0x44}
	codec := &IsoText{ASCII, "", "Should be '04ABCD'",
		&IsoLength{ASCII, LLVAR, 4}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x30, 0x37, 0x20, 0x20, 0x20, 0x41, 0x42, 0x43, 0x44}
	codec := &IsoText{ASCII, "", "Should be '07   ABCD'",
		&IsoLength{ASCII, LLVAR, 7}, LEFT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLVAR_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x30, 0x37, 0x41, 0x42, 0x43, 0x44, 0x20, 0x20, 0x20}
	codec := &IsoText{ASCII, "", "Should be '07ABCD   '",
		&IsoLength{ASCII, LLVAR, 7}, RIGHT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLLVAR_None(t *testing.T) {
	value := "ABCD                                                                                                    "
	expected := []byte{
		0x31, 0x30, 0x34,
		0x41, 0x42, 0x43, 0x44,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	codec := &IsoText{ASCII, "", "",
		&IsoLength{ASCII, LLLVAR, 104}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0x31, 0x30, 0x34,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x41, 0x42, 0x43, 0x44,
	}
	codec := &IsoText{ASCII, "", "",
		&IsoLength{ASCII, LLLVAR, 104}, LEFT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0x31, 0x30, 0x34,
		0x41, 0x42, 0x43, 0x44,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	codec := &IsoText{ASCII, "", "",
		&IsoLength{ASCII, LLLVAR, 104}, RIGHT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ascii_Encode_Fixed_None_Invalid_Len(t *testing.T) {
	value := "032"
	codec := &IsoText{ASCII, "MTI", "MESSAGE TYPE INDICATOR",
		&IsoLength{ASCII, FIXED, 4}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

/*
	EBCDIC
*/
func Test_Ebcdic_Encode_Fixed_None(t *testing.T) {
	value := "0320"
	expected := []byte{0xF0, 0xF3, 0xF2, 0xF0}
	codec := &IsoText{EBCDIC, "MTI", "MESSAGE TYPE INDICATOR",
		&IsoLength{EBCDIC, FIXED, 4}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_Fixed_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x40, 0xC1, 0xC2, 0xC3, 0xC4}
	codec := &IsoText{EBCDIC, "", "Should be ' ABCD'",
		&IsoLength{EBCDIC, FIXED, 5}, LEFT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_Fixed_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xC1, 0xC2, 0xC3, 0xC4, 0x40}
	codec := &IsoText{EBCDIC, "", "Should be 'ABCD   '",
		&IsoLength{EBCDIC, FIXED, 5}, RIGHT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLVAR_None(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xF0, 0xF4, 0xC1, 0xC2, 0xC3, 0xC4}
	codec := &IsoText{EBCDIC, "", "Should be '04ABCD'",
		&IsoLength{EBCDIC, LLVAR, 4}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xF0, 0xF7, 0x40, 0x40, 0x40, 0xC1, 0xC2, 0xC3, 0xC4}
	codec := &IsoText{EBCDIC, "", "Should be '07   ABCD'",
		&IsoLength{EBCDIC, LLVAR, 7}, LEFT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLVAR_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xF0, 0xF7, 0xC1, 0xC2, 0xC3, 0xC4, 0x40, 0x40, 0x40}
	codec := &IsoText{EBCDIC, "", "Should be '07ABCD   '",
		&IsoLength{EBCDIC, LLVAR, 7}, RIGHT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLLVAR_None(t *testing.T) {
	value := "ABCD                                                                                                    "
	expected := []byte{
		0xF1, 0xF0, 0xF4,
		0xC1, 0xC2, 0xC3, 0xC4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	}
	codec := &IsoText{EBCDIC, "", "",
		&IsoLength{EBCDIC, LLLVAR, 104}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0xF1, 0xF0, 0xF4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0xC1, 0xC2, 0xC3, 0xC4,
	}
	codec := &IsoText{EBCDIC, "", "",
		&IsoLength{EBCDIC, LLLVAR, 104}, LEFT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0xF1, 0xF0, 0xF4,
		0xC1, 0xC2, 0xC3, 0xC4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	}
	codec := &IsoText{EBCDIC, "", "",
		&IsoLength{EBCDIC, LLLVAR, 104}, RIGHT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Ebcdic_Encode_Fixed_None_Invalid_Len(t *testing.T) {
	value := "032"
	codec := &IsoText{EBCDIC, "MTI", "MESSAGE TYPE INDICATOR",
		&IsoLength{EBCDIC, FIXED, 4}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

/*
	Binary Coded Decimal - BINARY Encoding
*/

func Test_Binary_Encode_Fixed_None_1(t *testing.T) {
	value := "0320"
	expected := []byte{0x03, 0x20}
	codec := &IsoText{BINARY, "MTI", "MESSAGE TYPE INDICATOR",
		&IsoLength{BINARY, FIXED, 2}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_Fixed_None_2(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98}
	//expected := []byte{0x40, 0x34, 0xF0}
	codec := &IsoText{BINARY, "", "",
		&IsoLength{BINARY, FIXED, 7}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_Fixed_LeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x20, 0x12, 0x34}
	codec := &IsoText{BINARY, "", "",
		&IsoLength{BINARY, FIXED, 3}, LEFT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_Fixed_RightPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x20}
	codec := &IsoText{BINARY, "", "",
		&IsoLength{BINARY, FIXED, 8}, RIGHT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLVAR_None(t *testing.T) {
	value := "1234"
	expected := []byte{0x02, 0x12, 0x34}
	codec := &IsoText{BINARY, "", "Should be '041234'",
		&IsoLength{BINARY, LLVAR, 2}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x07, 0x20, 0x20, 0x20, 0x20, 0x20, 0x12, 0x34}
	codec := &IsoText{BINARY, "", "Should be '07          1234'",
		&IsoLength{BINARY, LLVAR, 7}, LEFT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLVAR_RightPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x03, 0x12, 0x34, 0x20}
	codec := &IsoText{BINARY, "", "",
		&IsoLength{BINARY, LLVAR, 3}, RIGHT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLLVAR_None(t *testing.T) {
	value := "2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F1"
	expected := []byte{
		0x01, 0x04,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1,
	}
	codec := &IsoText{BINARY, "", "",
		&IsoLength{BINARY, LLLVAR, 104}, NONE}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{
		0x01, 0x04,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98,
	}
	codec := &IsoText{BINARY, "", "",
		&IsoLength{BINARY, LLLVAR, 104}, LEFT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Binary_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{
		0x01, 0x04,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	codec := &IsoText{BINARY, "", "",
		&IsoLength{BINARY, LLLVAR, 104}, RIGHT}
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}
