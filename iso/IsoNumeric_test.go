package main

import "testing"

/*
	ASCII Encoding
*/
func Test_Numeric_Ascii_Encode_Fixed_None(t *testing.T) {
	value := "0123456789012345678901234567890123456789"
	expected := []byte{
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, FIXED, 40), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, FIXED, 10), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, FIXED, 10), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_LLVAR_None(t *testing.T) {
	value := "1234567890"
	expected := []byte{0x31, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLVAR, 10), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0x31, 0x30, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLVAR, 10), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLVAR_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLVAR, 10), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_LLLVAR_None(t *testing.T) {
	value := "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
	expected := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLLVAR, 120), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "0123456789"
	expected := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLLVAR, 120), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "0123456789"
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLLVAR, 120), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_None_Invalid_Len(t *testing.T) {
	value := "032"
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, FIXED, 4), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

/*
	EBCDIC
*/
