package main

import "testing"

/*
	ASCII Encoding
*/
func Test_Numeric_Ascii_Encode_Fixed_None(t *testing.T) {
	value := "0123456789012345678901234567890123456789"
	expected := []byte{
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, FIXED, 40), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, FIXED, 10), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, FIXED, 10), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_LLVAR_None(t *testing.T) {
	value := "1234567890"
	expected := []byte{0x31, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLVAR, 10), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0x31, 0x30, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLVAR, 10), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLVAR_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLVAR, 10), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_LLLVAR_None(t *testing.T) {
	value := "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
	expected := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLLVAR, 120), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "0123456789"
	expected := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLLVAR, 120), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ascii_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "0123456789"
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, LLLVAR, 120), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ascii_Encode_Fixed_None_Invalid_Len(t *testing.T) {
	value := "032"
	codec := IsoNumericNew(ASCII, "", "", IsoLengthNew(ASCII, FIXED, 4), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

/*
	EBCDIC
*/
func Test_Numeric_Ebcdic_Encode_Fixed_None(t *testing.T) {
	value := "0123456789012345678901234567890123456789"
	expected := []byte{
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, FIXED, 40), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_Fixed_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9}
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, FIXED, 10), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_Fixed_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, FIXED, 10), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ebcdic_Encode_LLVAR_None(t *testing.T) {
	value := "1234567890"
	expected := []byte{0xF1, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xF0}
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, LLVAR, 10), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0xF1, 0xF0, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9}
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, LLVAR, 10), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_LLVAR_RightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, LLVAR, 10), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Ebcdic_Encode_LLLVAR_None(t *testing.T) {
	value := "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
	expected := []byte{
		0xF1, 0xF2, 0xF0,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, LLLVAR, 120), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "0123456789"
	expected := []byte{
		0xF1, 0xF2, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, LLLVAR, 120), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Ebcdic_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "0123456789"
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, LLLVAR, 120), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_InvalidLen_Ebcdic_Encode_Fixed_None(t *testing.T) {
	value := "032"
	codec := IsoNumericNew(EBCDIC, "", "", IsoLengthNew(EBCDIC, FIXED, 4), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

/*
	Binary Coded Decimal - BINARY Encoding
*/
func Test_Numeric_Binary_Encode_Fixed_None(t *testing.T) {
	value := "0320"
	expected := []byte{0x03, 0x20}
	codec := IsoNumericNew(BINARY, "", "", IsoLengthNew(BINARY, FIXED, 2), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_Fixed_LeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x00, 0x12, 0x34}
	codec := IsoNumericNew(BINARY, "", "", IsoLengthNew(BINARY, FIXED, 3), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_Fixed_RightPad(t *testing.T) {
	value := "1234"
	codec := IsoNumericNew(BINARY, "", "", IsoLengthNew(BINARY, FIXED, 3), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Binary_Encode_LLVAR_None(t *testing.T) {
	value := "1234"
	expected := []byte{0x02, 0x12, 0x34}
	codec := IsoNumericNew(BINARY, "", "", IsoLengthNew(BINARY, LLVAR, 5), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_LLVAR_LeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34}
	codec := IsoNumericNew(BINARY, "", "", IsoLengthNew(BINARY, LLVAR, 7), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_LLVAR_RightPad(t *testing.T) {
	value := "1234"
	codec := IsoNumericNew(BINARY, "", "", IsoLengthNew(BINARY, LLVAR, 7), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func Test_Numeric_Binary_Encode_LLLVAR_None(t *testing.T) {
	value := "0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789"
	expected := []byte{
		0x01, 0x20,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
	}
	codec := IsoNumericNew(BINARY, "", "", IsoLengthNew(BINARY, LLLVAR, 120), NONE)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_LLLVAR_LeftPad(t *testing.T) {
	value := "01234567890123456789"
	expected := []byte{
		0x01, 0x20,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
	}
	codec := IsoNumericNew(BINARY, "", "", IsoLengthNew(BINARY, LLLVAR, 120), LEFT)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func Test_Numeric_Binary_Encode_LLLVAR_RightPad(t *testing.T) {
	value := "01234567890123456789"
	codec := IsoNumericNew(BINARY, "", "", IsoLengthNew(BINARY, LLLVAR, 120), RIGHT)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}
