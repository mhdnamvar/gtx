package main

import (
	"testing"
)

func TestIsoTextEncodeAsciiFixedNoPad(t *testing.T) {
	value := "0320"
	expected := []byte{0x30, 0x33, 0x32, 0x30}
	codec := IsoText(Fixed(), ASCII, 4, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeAsciiFixed(t *testing.T) {
	value := []byte{0x30, 0x33, 0x32, 0x30}
	expected := "0320"
	codec := IsoText(Fixed(), ASCII, 4, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeAsciiFixedLeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte("   ABCD")
	codec := IsoText(Fixed(), ASCII, 7, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeAsciiFixedLeftPad(t *testing.T) {
	value := []byte("   ABCD")
	expected := "   ABCD"
	codec := IsoText(Fixed(), ASCII, 7, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeAsciiFixedRightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte("ABCD   ")
	codec := IsoText(Fixed(), ASCII, 7, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeAsciiFixedRightPad(t *testing.T) {
	value := []byte("ABCD   ")
	expected := "ABCD   "
	codec := IsoText(Fixed(), ASCII, 7, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeAsciiLLVARNoPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x30, 0x34, 0x41, 0x42, 0x43, 0x44}
	codec := IsoText(LLVar(ASCII), ASCII, 4, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeAsciiLLVARNoPad(t *testing.T) {
	value := []byte{0x30, 0x34, 0x41, 0x42, 0x43, 0x44}
	expected := "ABCD"
	codec := IsoText(LLVar(ASCII), ASCII, 4, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeAsciiLLVARLeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x30, 0x37, 0x20, 0x20, 0x20, 0x41, 0x42, 0x43, 0x44}
	codec := IsoText(LLVar(ASCII), ASCII, 7, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeAsciiLLVARLeftPad(t *testing.T) {
	value := []byte{0x30, 0x37, 0x20, 0x20, 0x20, 0x41, 0x42, 0x43, 0x44}
	expected := "   ABCD"
	codec := IsoText(LLVar(ASCII), ASCII, 7, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeAsciiLLVARRightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x30, 0x37, 0x41, 0x42, 0x43, 0x44, 0x20, 0x20, 0x20}
	codec := IsoText(LLVar(ASCII), ASCII, 7, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeAsciiLLVARRightPad(t *testing.T) {
	value := []byte{0x30, 0x37, 0x41, 0x42, 0x43, 0x44, 0x20, 0x20, 0x20}
	expected := "ABCD   "
	codec := IsoText(LLVar(ASCII), ASCII, 7, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeAsciiLLLVARNoPad(t *testing.T) {
	value := "ABCD                                                                                                    "
	expected := []byte{
		0x31, 0x30, 0x34,
		0x41, 0x42, 0x43, 0x44,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	codec := IsoText(LLLVar(ASCII), ASCII, 104, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeAsciiLLLVARNoPad(t *testing.T) {
	value := []byte{
		0x31, 0x30, 0x34,
		0x41, 0x42, 0x43, 0x44,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	expected := "ABCD                                                                                                    "
	codec := IsoText(LLLVar(ASCII), ASCII, 104, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeAsciiLLLVARLeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0x31, 0x30, 0x34,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x41, 0x42, 0x43, 0x44,
	}
	codec := IsoText(LLLVar(ASCII), ASCII, 104, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeAsciiLLLVARLeftPad(t *testing.T) {
	value := []byte{
		0x31, 0x30, 0x34,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x41, 0x42, 0x43, 0x44,
	}
	expected := "                                                                                                    ABCD"
	codec := IsoText(LLLVar(ASCII), ASCII, 104, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeAsciiLLLVARRightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0x31, 0x30, 0x34,
		0x41, 0x42, 0x43, 0x44,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	codec := IsoText(LLLVar(ASCII), ASCII, 104, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeAsciiLLLVARRightPad(t *testing.T) {
	value := []byte{
		0x31, 0x30, 0x34,
		0x41, 0x42, 0x43, 0x44,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	expected := "ABCD                                                                                                    "
	codec := IsoText(LLLVar(ASCII), ASCII, 104, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeAsciiFixedNoPadInvalidLen(t *testing.T) {
	value := "032"
	codec := IsoText(Fixed(), ASCII, 4, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

func TestIsoTextDecodeAsciiFixedNoPadInvalidLen(t *testing.T) {
	value := []byte{0x00, 0x03, 0x32}
	codec := IsoText(Fixed(), ASCII, 4, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, NotEnoughData, err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericEncodeAsciiFixedNoPad(t *testing.T) {
	value := "0123456789012345678901234567890123456789"
	expected := []byte{
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumeric(Fixed(), ASCII, 40, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeAsciiFixedNoPad(t *testing.T) {
	value := []byte{
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	expected := "0123456789012345678901234567890123456789"
	codec := IsoNumeric(Fixed(), ASCII, 40, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeAsciiFixedLeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	codec := IsoNumeric(Fixed(), ASCII, 10, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeAsciiFixedLeftPad(t *testing.T) {
	value := []byte{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	expected := "0123456789"
	codec := IsoNumeric(Fixed(), ASCII, 10, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeAsciiFixedRightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumeric(Fixed(), ASCII, 10, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericDecodeAsciiFixedRightPad(t *testing.T) {
	value := []byte{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	expected := "0123456789"
	codec := IsoNumeric(Fixed(), ASCII, 10, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeAsciiLLVARNoPad(t *testing.T) {
	value := "1234567890"
	expected := []byte{0x31, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30}
	codec := IsoNumeric(LLVar(ASCII), ASCII, 10, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeAsciiLLVARNoPad(t *testing.T) {
	value := []byte{0x31, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30}
	expected := "1234567890"
	codec := IsoNumeric(LLVar(ASCII), ASCII, 10, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeAsciiLLVARLeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0x31, 0x30, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	codec := IsoNumeric(LLVar(ASCII), ASCII, 10, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeAsciiLLVARLeftPad(t *testing.T) {
	value := []byte{0x31, 0x30, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39}
	expected := "0123456789"
	codec := IsoNumeric(LLVar(ASCII), ASCII, 10, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeAsciiLLVARRightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumeric(LLVar(ASCII), ASCII, 10, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericEncodeAsciiLLLVARNoPad(t *testing.T) {
	value := "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
	expected := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumeric(LLLVar(ASCII), ASCII, 120, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeAsciiLLLVARNoPad(t *testing.T) {
	value := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	expected := "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
	codec := IsoNumeric(LLLVar(ASCII), ASCII, 120, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeAsciiLLLVARLeftPad(t *testing.T) {
	value := "0123456789"
	expected := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	codec := IsoNumeric(LLLVar(ASCII), ASCII, 120, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeAsciiLLLVARLeftPad(t *testing.T) {
	value := []byte{
		0x31, 0x32, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	}
	expected := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000123456789"
	codec := IsoNumeric(LLLVar(ASCII), ASCII, 120, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeAsciiLLLVARRightPad(t *testing.T) {
	value := "0123456789"
	codec := IsoNumeric(LLLVar(ASCII), ASCII, 120, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericEncodeAsciiFixedNoPadInvalidLen(t *testing.T) {
	value := "032"
	codec := IsoNumeric(Fixed(), ASCII, 4, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericDecodeAsciiFixedNoPadInvalidLen(t *testing.T) {
	value := []byte{0x31, 0x32, 0x30}
	codec := IsoNumeric(Fixed(), ASCII, 4, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, NotEnoughData, err)
	assertEqual(t, nil, actual)
}

func TestIsoTextEncodeEbcdicFixedNoPad(t *testing.T) {
	value := "0320"
	expected := []byte{0xF0, 0xF3, 0xF2, 0xF0}
	codec := IsoText(Fixed(), EBCDIC, 4, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeEbcdicFixedNoPad(t *testing.T) {
	value := []byte{0xF0, 0xF3, 0xF2, 0xF0}
	expected := "0320"
	codec := IsoText(Fixed(), EBCDIC, 4, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeEbcdicFixedLeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0x40, 0xC1, 0xC2, 0xC3, 0xC4}
	codec := IsoText(Fixed(), EBCDIC, 5, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeEbcdicFixedLeftPad(t *testing.T) {
	value := []byte{0x40, 0xC1, 0xC2, 0xC3, 0xC4}
	expected := " ABCD"
	codec := IsoText(Fixed(), EBCDIC, 5, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeEbcdicFixedRightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xC1, 0xC2, 0xC3, 0xC4, 0x40}
	codec := IsoText(Fixed(), EBCDIC, 5, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeEbcdicFixedRightPad(t *testing.T) {
	value := []byte{0xC1, 0xC2, 0xC3, 0xC4, 0x40}
	expected := "ABCD "
	codec := IsoText(Fixed(), EBCDIC, 5, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeEbcdicLLVARNoPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xF0, 0xF4, 0xC1, 0xC2, 0xC3, 0xC4}
	codec := IsoText(LLVar(EBCDIC), EBCDIC, 4, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeEbcdicLLVARNoPad(t *testing.T) {
	value := []byte{0xF0, 0xF4, 0xC1, 0xC2, 0xC3, 0xC4}
	expected := "ABCD"
	codec := IsoText(LLVar(EBCDIC), EBCDIC, 4, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeEbcdicLLVARLeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xF0, 0xF7, 0x40, 0x40, 0x40, 0xC1, 0xC2, 0xC3, 0xC4}
	codec := IsoText(LLVar(EBCDIC), EBCDIC, 7, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeEbcdicLLVARLeftPad(t *testing.T) {
	value := []byte{0xF0, 0xF7, 0x40, 0x40, 0x40, 0xC1, 0xC2, 0xC3, 0xC4}
	expected := "   ABCD"
	codec := IsoText(LLVar(EBCDIC), EBCDIC, 7, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeEbcdicLLVARRightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{0xF0, 0xF7, 0xC1, 0xC2, 0xC3, 0xC4, 0x40, 0x40, 0x40}
	codec := IsoText(LLVar(EBCDIC), EBCDIC, 7, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeEbcdicLLVARRightPad(t *testing.T) {
	value := []byte{0xF0, 0xF7, 0xC1, 0xC2, 0xC3, 0xC4, 0x40, 0x40, 0x40}
	expected := "ABCD   "
	codec := IsoText(LLVar(EBCDIC), EBCDIC, 7, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeEbcdicLLLVARNoPad(t *testing.T) {
	value := "ABCD                                                                                                    "
	expected := []byte{
		0xF1, 0xF0, 0xF4,
		0xC1, 0xC2, 0xC3, 0xC4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	}
	codec := IsoText(LLLVar(EBCDIC), EBCDIC, 104, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeEbcdicLLLVARNoPad(t *testing.T) {
	value := []byte{
		0xF1, 0xF0, 0xF4,
		0xC1, 0xC2, 0xC3, 0xC4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	}
	expected := "ABCD                                                                                                    "
	codec := IsoText(LLLVar(EBCDIC), EBCDIC, 104, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeEbcdicLLLVARLeftPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0xF1, 0xF0, 0xF4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0xC1, 0xC2, 0xC3, 0xC4,
	}
	codec := IsoText(LLLVar(EBCDIC), EBCDIC, 104, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeEbcdicLLLVARLeftPad(t *testing.T) {
	value := []byte{
		0xF1, 0xF0, 0xF4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0xC1, 0xC2, 0xC3, 0xC4,
	}
	expected := "                                                                                                    ABCD"
	codec := IsoText(LLLVar(EBCDIC), EBCDIC, 104, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeEbcdicLLLVARRightPad(t *testing.T) {
	value := "ABCD"
	expected := []byte{
		0xF1, 0xF0, 0xF4,
		0xC1, 0xC2, 0xC3, 0xC4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	}
	codec := IsoText(LLLVar(EBCDIC), EBCDIC, 104, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeEbcdicLLLVARRightPad(t *testing.T) {
	value := []byte{
		0xF1, 0xF0, 0xF4,
		0xC1, 0xC2, 0xC3, 0xC4,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
	}
	expected := "ABCD                                                                                                    "
	codec := IsoText(LLLVar(EBCDIC), EBCDIC, 104, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeEbcdicFixedNoPadInvalidLen(t *testing.T) {
	value := "032"
	codec := IsoText(Fixed(), EBCDIC, 4, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

func TestIsoTextDecodeEbcdicFixedNoPadInvalidLen(t *testing.T) {
	value := []byte{0xF0, 0xF1, 0xF2}
	codec := IsoText(Fixed(), EBCDIC, 4, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, NotEnoughData, err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericEncodeEbcdicFixedNoPad(t *testing.T) {
	value := "0123456789012345678901234567890123456789"
	expected := []byte{
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	codec := IsoNumeric(Fixed(), EBCDIC, 40, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeEbcdicFixedNoPad(t *testing.T) {
	value := []byte{
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	expected := "0123456789012345678901234567890123456789"
	codec := IsoNumeric(Fixed(), EBCDIC, 40, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeEbcdicFixedLeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9}
	codec := IsoNumeric(Fixed(), EBCDIC, 10, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeEbcdicFixedLeftPad(t *testing.T) {
	value := []byte{0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9}
	expected := "0123456789"
	codec := IsoNumeric(Fixed(), EBCDIC, 10, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeEbcdicFixedRightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumeric(Fixed(), EBCDIC, 10, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericEncodeEbcdicLLVARNoPad(t *testing.T) {
	value := "1234567890"
	expected := []byte{0xF1, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xF0}
	codec := IsoNumeric(LLVar(EBCDIC), EBCDIC, 10, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeEbcdicLLVARNoPad(t *testing.T) {
	value := []byte{0xF1, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xF0}
	expected := "1234567890"
	codec := IsoNumeric(LLVar(EBCDIC), EBCDIC, 10, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeEbcdicLLVARLeftPad(t *testing.T) {
	value := "123456789"
	expected := []byte{0xF1, 0xF0, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9}
	codec := IsoNumeric(LLVar(EBCDIC), EBCDIC, 10, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeEbcdicLLVARLeftPad(t *testing.T) {
	value := []byte{0xF1, 0xF0, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9}
	expected := "0123456789"
	codec := IsoNumeric(LLVar(EBCDIC), EBCDIC, 10, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeEbcdicLLVARRightPad(t *testing.T) {
	value := "123456789"
	codec := IsoNumeric(LLVar(EBCDIC), EBCDIC, 10, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericEncodeEbcdicLLLVARNoPad(t *testing.T) {
	value := "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
	expected := []byte{
		0xF1, 0xF2, 0xF0,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	codec := IsoNumeric(LLLVar(EBCDIC), EBCDIC, 120, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeEbcdicLLLVARNoPad(t *testing.T) {
	value := []byte{
		0xF1, 0xF2, 0xF0,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	expected := "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
	codec := IsoNumeric(LLLVar(EBCDIC), EBCDIC, 120, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeEbcdicLLLVARLeftPad(t *testing.T) {
	value := "0123456789"
	expected := []byte{
		0xF1, 0xF2, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	codec := IsoNumeric(LLLVar(EBCDIC), EBCDIC, 120, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeEbcdicLLLVARLeftPad(t *testing.T) {
	value := []byte{
		0xF1, 0xF2, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
		0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9,
	}
	expected := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000123456789"
	codec := IsoNumeric(LLLVar(EBCDIC), EBCDIC, 120, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeEbcdicLLLVARRightPad(t *testing.T) {
	value := "0123456789"
	codec := IsoNumeric(LLLVar(EBCDIC), EBCDIC, 120, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func TestNumericInvalidLenEbcdicEncodeFixedNoPad(t *testing.T) {
	value := "032"
	codec := IsoNumeric(Fixed(), EBCDIC, 4, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, Errors[InvalidLengthError], err)
	assertEqual(t, nil, actual)
}

func TestNumericInvalidLenEbcdicDecodeFixedNoPad(t *testing.T) {
	value := []byte{0x12, 0x34}
	codec := IsoNumeric(Fixed(), EBCDIC, 4, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, NotEnoughData, err)
	assertEqual(t, nil, actual)
}

func TestIsoTextEncodeBinaryFixedNoPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98}
	codec := IsoText(Fixed(), BINARY, 7, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeBinaryFixedNoPad(t *testing.T) {
	expected := "2D2A98F12D2A98"
	value := []byte{0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98}
	codec := IsoText(Fixed(), BINARY, 7, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeBinaryFixedLeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x20, 0x12, 0x34}
	codec := IsoText(Fixed(), BINARY, 3, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeBinaryFixedLeftPad(t *testing.T) {
	value := []byte{0x20, 0x12, 0x34}
	expected := "201234"
	codec := IsoText(Fixed(), BINARY, 3, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeBinaryFixedRightPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x20}
	codec := IsoText(Fixed(), BINARY, 8, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeBinaryFixedRightPad(t *testing.T) {
	value := []byte{0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x20}
	expected := "2D2A98F12D2A9820"
	codec := IsoText(Fixed(), BINARY, 8, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeBinaryLLVARNoPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x02, 0x12, 0x34}
	codec := IsoText(LLVar(BINARY), BINARY, 2, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeBinaryLLVARNoPad(t *testing.T) {
	value := []byte{0x02, 0x12, 0x34}
	expected := "1234"
	codec := IsoText(LLVar(BINARY), BINARY, 2, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeBinaryLLVARLeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x07, 0x20, 0x20, 0x20, 0x20, 0x20, 0x12, 0x34}
	codec := IsoText(LLVar(BINARY), BINARY, 7, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeBinaryLLVARLeftPad(t *testing.T) {
	value := []byte{0x07, 0x20, 0x20, 0x20, 0x20, 0x20, 0x12, 0x34}
	expected := "20202020201234"
	codec := IsoText(LLVar(BINARY), BINARY, 7, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeBinaryLLVARRightPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x03, 0x12, 0x34, 0x20}
	codec := IsoText(LLVar(BINARY), BINARY, 3, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeBinaryLLVARRightPad(t *testing.T) {
	value := []byte{0x03, 0x12, 0x34, 0x20}
	expected := "123420"
	codec := IsoText(LLVar(BINARY), BINARY, 3, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeBinaryLLLVARNoPad(t *testing.T) {
	value := "2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F1"
	expected := []byte{
		0x01, 0x04,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1,
	}
	codec := IsoText(LLLVar(BINARY), BINARY, 104, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeBinaryLLLVARNoPad(t *testing.T) {
	value := []byte{
		0x01, 0x04,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0x2D, 0x2A, 0x98, 0xF1, 0x2D,
		0x2D, 0x2A, 0x98, 0xF1,
	}
	expected := "2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F12D2A982D2A982D2A98F12D2A982D2A982D2A98F12D" +
		"2D2A98F1"
	codec := IsoText(LLLVar(BINARY), BINARY, 104, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeBinaryLLLVARLeftPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{
		0x01, 0x04,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98,
	}
	codec := IsoText(LLLVar(BINARY), BINARY, 104, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextDecodeBinaryLLLVARLeftPad(t *testing.T) {
	value := []byte{
		0x01, 0x04,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98,
	}
	expected := "202020202020202020202020202020202020202020202020202020202020202020202020202020202020" +
		"20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020" +
		"2D2A98F12D2A98"
	codec := IsoText(LLLVar(BINARY), BINARY, 104, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoTextEncodeBinaryLLLVARRightPad(t *testing.T) {
	value := "2D2A98F12D2A98"
	expected := []byte{
		0x01, 0x04,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	codec := IsoText(LLLVar(BINARY), BINARY, 104, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}
func TestIsoTextDecodeBinaryLLLVARRightPad(t *testing.T) {
	value := []byte{
		0x01, 0x04,
		0x2D, 0x2A, 0x98, 0xF1, 0x2D, 0x2A, 0x98,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	}
	expected := "2D2A98F12D2A98" + "202020202020202020202020202020202020202020202020202020202020202020202020202020202020" +
		"20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020"
	codec := IsoText(LLLVar(BINARY), BINARY, 104, RightPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}
func TestIsoNumericEncodeBinaryFixedNoPad(t *testing.T) {
	value := "0320"
	expected := []byte{0x03, 0x20}
	codec := IsoNumeric(Fixed(), BINARY, 2, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeBinaryFixedNoPad(t *testing.T) {
	value := []byte{0x03, 0x20}
	expected := "0320"
	codec := IsoNumeric(Fixed(), BINARY, 2, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeBinaryFixedLeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x00, 0x12, 0x34}
	codec := IsoNumeric(Fixed(), BINARY, 3, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}
func TestIsoNumericDecodeBinaryFixedLeftPad(t *testing.T) {
	value := []byte{0x00, 0x12, 0x34}
	expected := "001234"
	codec := IsoNumeric(Fixed(), BINARY, 3, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeBinaryFixedRightPad(t *testing.T) {
	value := "1234"
	codec := IsoNumeric(Fixed(), BINARY, 3, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericEncodeBinaryLLVARNoPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x02, 0x12, 0x34}
	codec := IsoNumeric(LLVar(BINARY), BINARY, 5, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeBinaryLLVARNoPad(t *testing.T) {
	value := []byte{0x02, 0x12, 0x34}
	expected := "1234"
	codec := IsoNumeric(LLVar(BINARY), BINARY, 5, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeBinaryLLVARLeftPad(t *testing.T) {
	value := "1234"
	expected := []byte{0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34}
	codec := IsoNumeric(LLVar(BINARY), BINARY, 7, LeftPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeBinaryLLVARLeftPad(t *testing.T) {
	value := []byte{0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34}
	expected := "00000000001234"
	codec := IsoNumeric(LLVar(BINARY), BINARY, 7, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}
func TestIsoNumericEncodeBinaryLLVARRightPad(t *testing.T) {
	value := "1234"
	codec := IsoNumeric(LLVar(BINARY), BINARY, 7, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}

func TestIsoNumericEncodeBinaryLLLVARNoPad(t *testing.T) {
	value := "0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789"
	expected := []byte{
		0x01, 0x20,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
	}
	codec := IsoNumeric(LLLVar(BINARY), BINARY, 120, NoPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericDecodeBinaryLLLVARNoPad(t *testing.T) {
	value := []byte{
		0x01, 0x20,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
	}
	expected := "0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789" +
		"0123456789012345678901234567890123456789"

	codec := IsoNumeric(LLLVar(BINARY), BINARY, 120, NoPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeBinaryLLLVARLeftPad(t *testing.T) {
	value := []byte{
		0x01, 0x20,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x23, 0x45, 0x67, 0x89, 0x01, 0x23, 0x45, 0x67, 0x89,
	}
	expected := "0000000000000000000000000000000000000000" +
		"0000000000000000000000000000000000000000" +
		"0000000000000000000000000000000000000000" +
		"0000000000000000000000000000000000000000" +
		"0000000000000000000000000000000000000000" +
		"00000000000000000000" +
		"01234567890123456789"
	codec := IsoNumeric(LLLVar(BINARY), BINARY, 120, LeftPadding)
	actual, err := codec.Decode(value)
	assertEqual(t, nil, err)
	assertEqual(t, expected, actual)
}

func TestIsoNumericEncodeBinaryLLLVARRightPad(t *testing.T) {
	value := "01234567890123456789"
	codec := IsoNumeric(LLLVar(BINARY), BINARY, 120, RightPadding)
	actual, err := codec.Encode(value)
	assertEqual(t, NotSupported, err)
	assertEqual(t, nil, actual)
}
